#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include <iostream>

#include "lbe_version.h"

using namespace std;

int main (int argc, char *argv[]) {

  // Number of particles
  int np = 0;

  // Number of bins
  int nb = 8;

  // Maximum timestep / time increment
  int t_max = 0;
  int dt = 0;

  // md-cfg file name (t00000000)
  char* fname_md;
  
  // Flags
  bool fname_md_set = false;
  bool np_set = false;
  bool header = false;

  // Position array pointers
  float **px;
  float **py;
  float **pz;

  int ny;

  // Parsing CLI
  for (int i = 1; i < argc ; i++) {

    // fprintf(stdout,"  argc = %d, argv[%d] = <%s>\n",argc,i,argv[i]);

    if ( strcmp(argv[i],"-b") == 0 ) {
      if ( i+1 < argc ) {
	nb = atoi(argv[++i]);
	//fprintf(stdout,"  Number of bins <%d>\n",nb);
      }
      else {
	fprintf(stderr,"  Missing argument to -b flag. \n");
	exit(1);
      }
    }

    else if ( strcmp(argv[i],"-d") == 0 ) {
      if ( i+1 < argc ) {
	dt = atoi(argv[++i]);
	//fprintf(stdout,"  Timestep <%d>\n",dt);
      }
      else {
	fprintf(stderr,"  Missing argument to -d flag. \n");
	exit(1);
      }
    }

    else if ( strcmp(argv[i],"-f") == 0 ) {
      if ( i+1 < argc ) {
	fname_md = argv[++i];
	//fprintf(stdout,"  MD file <%s>\n",fname_md);
	fname_md_set = true;
      }
      else {
	fprintf(stderr,"  Missing argument to -f flag. \n");
	exit(1);
      }
    }

    else if ( strcmp(argv[i],"-n") == 0 ) {
      if ( i+1 < argc ) {
	np = atoi(argv[++i]);
	//fprintf(stdout,"  Number of particles <%d>\n",np);
	np_set = true;
      }
      else {
	fprintf(stderr,"  Missing argument to -n flag. \n");
	exit(1);
      }
    }

    else if ( strcmp(argv[i],"-h") == 0 ) {
      header = true;
      //fprintf(stdout,"  Header\n");
    }

    else if ( strcmp(argv[i],"-t") == 0 ) {
      if ( i+1 < argc ) {
	t_max = atoi(argv[++i]);
	//fprintf(stdout,"  Max time <%d>\n",dt);
      }
      else {
	fprintf(stderr,"  Missing argument to -t flag. \n");
	exit(1);
      }
    }

    else if ( strcmp(argv[i],"-y") == 0 ) {
      if ( i+1 < argc ) {
	ny = atoi(argv[++i]);
	//fprintf(stdout,"  Y-size <%d>\n",ny);
      }
      else {
	fprintf(stderr,"  Missing argument to -y flag. \n");
	exit(1);
      }
    }

    else {
      //fprintf(stdout,"  No matches for <%s>.\n",argv[i]);
    }


  }

  // Checking for mandatory parameters
  if (! ( fname_md_set && np_set ) ) {
    fprintf(stdout,"droplet-tt (%s)\n\n", GIT_DESC);
    fprintf(stderr,"MD file -f and number of particles -n are mandatory.\n\n");
    fprintf(stderr,"  -b               <number of bins>\n");
    fprintf(stderr,"  -d               <timestep>\n");
    fprintf(stderr,"  -f               <md-cfg file>\n");
    fprintf(stderr,"  -h               \n");
    fprintf(stderr,"  -n               <number of particles>\n");
    fprintf(stderr,"  -t               <timestep>\n");
    fprintf(stderr,"  -y               <Y-size>\n");
    fprintf(stderr,"\n");
    exit(1);
  }

  // Calculate size of temporal array
  int ts;

  if ( dt == 0 ) {
    ts = 1;
  }
  else {
    if ( t_max % dt != 0 ) {
      fprintf(stderr,"  Maximum timestep cannot be divided by dt. \n");
      exit(1);
    }
    ts = t_max / dt + 1;
  }
  
  fprintf(stdout,"#\n");
  fprintf(stdout,"# GENERATED BY: droplet-tt (%s)\n", GIT_DESC);
  fprintf(stdout,"#\n");

  // Allocate memory for position arrays
  fprintf(stdout,"# Allocating memory for %d particles over %d timesteps...\n", np, ts);

  /*  allocate storage for an array of pointers to particles */
  px = (float **) malloc(np * sizeof(float *));
  if (!px) {
    fprintf(stderr,"ERROR: (1) can't allocate memory for px, aborting... \n");
    exit(1);
  }
  py = (float **) malloc(np * sizeof(float *));
  if (!py) {
    fprintf(stderr,"ERROR: (1) can't allocate memory for py, aborting... \n");
    exit(1);
  }
  pz = (float **) malloc(np * sizeof(float *));
  if (!pz) {
    fprintf(stderr,"ERROR: (1) can't allocate memory for pz, aborting... \n");
    exit(1);
  }

  /* for each pointer, allocate storage for an array of floats */
  for (int i = 0; i < np; i++) {
    px[i] = (float *) malloc(ts * sizeof(float));
    if (!px[i]) {
      fprintf(stderr,"ERROR: (2) can't allocate memory for px, aborting... \n");
      exit(1);
    }
    py[i] = (float *) malloc(ts * sizeof(float));
    if (!py[i]) {
      fprintf(stderr,"ERROR: (2) can't allocate memory for py, aborting... \n");
      exit(1);
    }
    pz[i] = (float *) malloc(ts * sizeof(float));
    if (!pz[i]) {
      fprintf(stderr,"ERROR: (2) can't allocate memory for pz, aborting... \n");
      exit(1);
    }
  }

  fprintf(stdout, "# Successfully allocated memory... \n");


  FILE * pFile;

  const int tstrlen = 9;
  char* tpos;
  char tstr_new[tstrlen];
  char tstr_old[tstrlen];

  // Start reading files
  // Loop over time steps
  for ( int t = 0 ; t < ts ; t++ ) {

    float bx, by, bz, bvx, bvy, bvz, bfx, bfy, bfz;
    int bid;

    //fprintf(stdout, "# Starting timestep t%.8d ...\n",t*dt);

    // Overwrite the timestep section of the filename with the current timestep
    sprintf(tstr_new,"t%.8d",t*dt);
    sprintf(tstr_old,"t%.8d",(t-1)*dt >= 0 ? (t-1)*dt : 0); // Could've used max(...,0) here, but I wanted to use the ternary operator for a change
    tpos = strstr(fname_md,tstr_old);
    strncpy(tpos,tstr_new,tstrlen);

    // Open the file
    pFile = fopen (fname_md,"r");

    if (!pFile) {
      fprintf(stderr, "Failed to open file <%s>... \n",fname_md);
      exit(1);
    }

    // fprintf(stdout, "# Processing file <%s>... \n",fname_md);

    // Loop over lines (particles)
    // If np is not correct this will segfault horribly
    for ( int i = 0 ; i < np ; i++ ) {
      fscanf (pFile, "%E %E %E %E %E %E %E %E %E %d\n", &bx, &by, &bz, &bvx, &bvy, &bvz, &bfx, &bfy, &bfz, &bid);
      px[bid-1][t] = bx;
      py[bid-1][t] = by;
      pz[bid-1][t] = bz;
    }
    fclose (pFile);

  }

  // Test for one particle

  const int itest = -1;

  const float xmin = 120.0;
  const float xmax = 140.0;
  
  const float zmin = 240.0;
  const float zmax = 280.0;

  double fx_sum = 0.0;
  double fz_sum = 0.0;
  int fx_cnt = 0;
  int fz_cnt = 0;

  for ( int i = 0 ; i < np ; i ++ ) {

    // bool xplus = false;
    // bool zplus = false;

    bool inxmin = false;
    bool inxmax = false;
    bool inzmin = false;
    bool inzmax = false;

    int xflips, xfirst, xlast;
    int zflips, zfirst, zlast;

    int b[nb];
    int myb;

    // Reset bins
    for ( int j = 0 ; j < nb ; j++ ) {
      b[j] = 0;
    }

    xflips = 0;
    xfirst = 0;
    xlast  = 0;
    zflips = 0;
    zfirst = 0;
    zlast  = 0;

    // special case t = 0
    if (i == itest) fprintf(stdout,"%.8d %d %E %E %E\n", 0, i, px[i][0], py[i][0], pz[i][0] );

    for ( int t = 1 ; t < ts ; t++ ) {

      // Calculate the current bin of the particle and count it
      myb = py[i][t] * nb / ny;
      b[myb]++;

      //fprintf(stdout,"n = %d, t = %d, y = %lf , b = %d\n",i,t,py[i][t],myb);

      // if (t == 1) {
      // 	if (px[i][t] > px[i][t-1]) { 
      // 	  if ( i == itest) fprintf(stdout,"Set xplus to true.\n");
      // 	  xplus = true;
      // 	}
      // 	if (pz[i][t] > pz[i][t-1]) {
      // 	  if ( i == itest) fprintf(stdout,"Set zplus to true.\n");
      // 	  zplus = true;
      // 	}
      // }

      // else {
      // 	if (px[i][t] > px[i][t-1]) {
      // 	  if (!xplus) {
      // 	    if (i == itest) fprintf(stdout,"X sign flip to + @ t = %d\n",t);
      // 	    xplus = true;
      // 	    xflips++;
      // 	    xlast = t;
      // 	    if (!xfirst) xfirst = t;
      // 	  }
      // 	}
      // 	else {
      // 	  if (xplus) {
      // 	    if (i == itest) fprintf(stdout,"X sign flip to - @ t = %d\n",t);
      // 	    xplus = false;
      // 	    xflips++;
      // 	    xlast = t;
      // 	    if (!xfirst) xfirst = t;
      // 	  }
      // 	}
      // 	if (pz[i][t] > pz[i][t-1]) {
      // 	  if (!zplus) {
      // 	    if (i == itest) fprintf(stdout,"Z sign flip to + @ t = %d\n",t);
      // 	    zplus = true;
      // 	    zflips++;
      // 	    zlast = t;
      // 	    if (!zfirst) zfirst = t;
      // 	  }
      // 	}
      // 	else {
      // 	  if (zplus) {
      // 	    if (i == itest) fprintf(stdout,"Z sign flip to - @ t = %d\n",t);
      // 	    zplus = false;
      // 	    zflips++;
      // 	    zlast = t;
      // 	    if (!zfirst) zfirst = t;

      // 	  }
      // 	}
      // }

      if (t == 1) {
	if (px[i][t] > xmax) { 
	  if ( i == itest) fprintf(stdout,"# Set inxmax to true.\n");
	  inxmax = true;
	}
	if (px[i][t] < xmin) { 
	  if ( i == itest) fprintf(stdout,"# Set inxmin to true.\n");
	  inxmin = true;
	}

	if (pz[i][t] > zmax) { 
	  if ( i == itest) fprintf(stdout,"# Set inzmax to true.\n");
	  inzmax = true;
	}
	if (pz[i][t] < zmin) { 
	  if ( i == itest) fprintf(stdout,"# Set inzmin to true.\n");
	  inzmin = true;
	}

      }

      else {
	if (px[i][t] > xmax) {
	  if (!inxmax) {
	    if (i == itest) fprintf(stdout,"# X sign flip to + @ t = %d\n",t);
	    inxmax = true;
	    inxmin = false;
	    xflips++;
	    xlast = t;
	    if (!xfirst) xfirst = t;
	  }
	  else {
	    inxmax = true;
	  }
	}
	else if (px[i][t] < xmin) {
	  if (!inxmin) {
	    if (i == itest) fprintf(stdout,"# X sign flip to - @ t = %d\n",t);
	    inxmax = false;
	    inxmin = true;
	    xflips++;
	    xlast = t;
	    if (!xfirst) xfirst = t;
	  }
	}
	if (pz[i][t] > zmax) {
	  if (!inzmax) {
	    if (i == itest) fprintf(stdout,"# Z sign flip to + @ t = %d\n",t);
	    inzmax = true;
	    inzmin = false;
	    zflips++;
	    zlast = t;
	    if (!zfirst) zfirst = t;
	  }
	  else {
	    inzmax = true;
	  }
	}
	else if (pz[i][t] < zmin) {
	  if (!inzmin) {
	    if (i == itest) fprintf(stdout,"# Z sign flip to - @ t = %d\n",t);
	    inzmax = false;
	    inzmin = true;
	    zflips++;
	    zlast = t;
	    if (!zfirst) zfirst = t;
	  }
	}
      }

      if (i == itest) fprintf(stdout,"# %.8d %d %E %E %E\n", t*dt, i, px[i][t], py[i][t], pz[i][t]);
    }

    // Choose my bin myb as the bin where the particle spends most of the time.
    myb = 0;
    for ( int j = 1; j < nb; j++ ) {
      if ( b[j] > b[myb] ) myb = j;
    }
    fprintf(stdout,"# my bin = %d - bins: %d %d %d %d %d %d %d %d\n", myb, b[0], b[1], b[2], b[3], b[4], b[5], b[6], b[7] );

    // Calculate time for a revolution of the particle.
    double fx, fz;
    fx = 2.0* ( (double) (xlast - xfirst) ) / ( (double) xflips - 1.0);
    fz = 2.0* ( (double) (zlast - zfirst) ) / ( (double) zflips - 1.0);

    if (xflips > 1) {
      fx_sum += fx;
      fx_cnt++;
    }

    if (zflips > 1) {
      fz_sum += fz;
      fz_cnt++;
    }

    // Dump particle data - last 2 numbers are most useful for plotting
    if ( myb == 3 || myb == 4  ) {
      fprintf(stdout,"%d %d %d %d %d %d %d %d %lf %lf\n", i, xflips, xfirst, xlast, zflips, zfirst, zlast, myb, dt*fx, dt*fz );
    }
    else {
      fprintf(stdout,"# %d %d %d %d %d %d %d %d %lf %lf\n", i, xflips, xfirst, xlast, zflips, zfirst, zlast, myb, dt*fx, dt*fz );
    }

    // Write to bin files
    char fname_out[9];

    sprintf(fname_out,"bin%.2d.txt",myb);

    pFile = fopen (fname_out,"r");
    if (!pFile) {
      pFile = fopen (fname_out,"a");
      fprintf(pFile,"#? %s %s %s %s %s %s %s %s %s %s\n", "i", "xflips", "xfirst", "xlast", "zflips", "zfirst", "zlast", "myb", "dt*fx", "dt*fz" );
      fclose(pFile);
    }
     
    pFile = fopen (fname_out,"a");
    fprintf(pFile,"%d %d %d %d %d %d %d %d %lf %lf\n", i, xflips, xfirst, xlast, zflips, zfirst, zlast, myb, dt*fx, dt*fz );
    fclose(pFile);

    
  }

  fprintf(stdout,"# %d %lf %lf\n", fx_cnt, dt*fx_sum, dt*fx_sum/fx_cnt );
  fprintf(stdout,"# %d %lf %lf\n", fz_cnt, dt*fz_sum, dt*fz_sum/fz_cnt );


}

